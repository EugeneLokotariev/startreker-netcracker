/* EDU-NETCRAKCER GROUP1 DDL SCRIPT */

DROP TABLE IF EXISTS USER_A CASCADE;
DROP TABLE IF EXISTS ROLE_A CASCADE;
DROP TABLE IF EXISTS ASSIGNED_ROLE;
DROP TABLE IF EXISTS TICKET CASCADE;
DROP TABLE IF EXISTS TICKET_CLASS CASCADE;
DROP TABLE IF EXISTS TRIP CASCADE;
DROP TABLE IF EXISTS VEHICLE;
DROP TABLE IF EXISTS REPORT CASCADE;
DROP TABLE IF EXISTS REPORT_REPLY;
DROP TABLE IF EXISTS FEEDBACK;
DROP TABLE IF EXISTS SPACEPORT;
DROP TABLE IF EXISTS PLANET;
DROP TABLE IF EXISTS SERVICE CASCADE;
DROP TABLE IF EXISTS POSSIBLE_SERVICE CASCADE;
DROP TABLE IF EXISTS BOUGHT_SERVICE;
DROP TABLE IF EXISTS BUNDLE CASCADE;
DROP TABLE IF EXISTS BUNDLE_CLASS;
DROP TABLE IF EXISTS BUNDLE_SERVICE;
DROP TABLE IF EXISTS DISCOUNT CASCADE;
DROP TABLE IF EXISTS DISCOUNT_CLASS;
DROP TABLE IF EXISTS DISCOUNT_SERVICE;
DROP TABLE IF EXISTS NOTIFICATION;
DROP TABLE IF EXISTS NOTIFICATION_OBJECT;
DROP TABLE IF EXISTS SCHEDULE;
DROP TABLE IF EXISTS SUBSCRIPTION;
DROP TABLE IF EXISTS TRIP_REPLY;
DROP TABLE IF EXISTS SERVICE_REPLY;
DROP TABLE IF EXISTS SUGGESTION CASCADE;
DROP TABLE IF EXISTS SUGGESTED_SERVICE;
DROP TABLE IF EXISTS SERVICE_VIEW;
DROP TABLE IF EXISTS TRIP_VIEW;
DROP TABLE IF EXISTS BOUGHT_BUNDLE CASCADE;

CREATE TABLE USER_A(
	USER_ID SERIAL PRIMARY KEY,
	USER_NAME VARCHAR(40) NOT NULL,
	USER_PASSWORD VARCHAR(64) NOT NULL,
	USER_EMAIL VARCHAR(40) NOT NULL UNIQUE,
	USER_TELEPHONE VARCHAR(15),
	USER_TOKEN VARCHAR(256),
	USER_ACTIVATED BOOLEAN,
	USER_CREATED TIMESTAMP NOT NULL
);

CREATE TABLE SUBSCRIPTION(
	USER_ID INTEGER REFERENCES USER_A (USER_ID),
	CARRIER_ID INTEGER REFERENCES USER_A (USER_ID)
);

CREATE TABLE ROLE_A(
	ROLE_ID SERIAL PRIMARY KEY,
	ROLE_NAME VARCHAR(18) NOT NULL
);

CREATE TABLE ASSIGNED_ROLE(
	USER_ID INTEGER REFERENCES USER_A (USER_ID),
	ROLE_ID INTEGER REFERENCES ROLE_A (ROLE_ID)
);

CREATE TABLE PLANET(
	PLANET_ID SERIAL PRIMARY KEY,
	PLANET_NAME VARCHAR(20) NOT NULL
);

CREATE TABLE SPACEPORT(
	SPACEPORT_ID SERIAL PRIMARY KEY,
	SPACEPORT_NAME VARCHAR(40) NOT NULL,
	CREATION_DATE TIMESTAMP NOT NULL,
	PLANET_ID INTEGER REFERENCES PLANET (PLANET_ID)
);

CREATE TABLE DISCOUNT(
	DISCOUNT_ID SERIAL PRIMARY KEY,
	START_DATE TIMESTAMP NOT NULL,
	FINISH_DATE TIMESTAMP NOT NULL,
	DISCOUNT_RATE INTEGER NOT NULL,
	IS_PERCENT BOOLEAN
);

-- TIMESTAMP - date and time with time zones
CREATE TABLE TRIP(

	TRIP_ID SERIAL PRIMARY KEY,
	CARRIER_ID INTEGER REFERENCES USER_A (USER_ID),
	TRIP_STATUS INTEGER,
	DEPARTURE_DATE TIMESTAMP NOT NULL,
	ARRIVAL_DATE TIMESTAMP NOT NULL,
	DEPARTURE_ID INTEGER REFERENCES SPACEPORT (SPACEPORT_ID),
	ARRIVAL_ID INTEGER REFERENCES SPACEPORT (SPACEPORT_ID),
	TRIP_PHOTO VARCHAR(128) NOT NULL,
	APPROVER_ID INTEGER REFERENCES USER_A (USER_ID),
	CREATION_DATE TIMESTAMP NOT NULL
);

CREATE TABLE TRIP_REPLY(
	TRIP_ID INTEGER REFERENCES TRIP (TRIP_ID),
	WRITER_ID INTEGER REFERENCES USER_A (USER_ID),
	REPLY_TEXT TEXT NOT NULL,
	CREATION_DATE TIMESTAMP NOT NULL
);

CREATE TABLE TICKET_CLASS(
	CLASS_ID SERIAL PRIMARY KEY,
	CLASS_NAME VARCHAR(40),
	TRIP_ID INTEGER REFERENCES TRIP (TRIP_ID),
	CLASS_SEATS INTEGER,
	DISCOUNT_ID INTEGER REFERENCES DISCOUNT (DISCOUNT_ID),
	TICKET_PRICE INTEGER NOT NULL
);

CREATE TABLE REPORT(
	REPORT_ID SERIAL PRIMARY KEY,
	REPORTER_ID INTEGER REFERENCES USER_A (USER_ID),
	APPROVER_ID INTEGER REFERENCES USER_A (USER_ID),
	TRIP_ID INTEGER REFERENCES TRIP (TRIP_ID),
	STATUS INTEGER NOT NULL,
	REPORT_RATE INTEGER,
	REPORT_TEXT TEXT NOT NULL,
	CREATION_DATE TIMESTAMP NOT NULL
);

CREATE TABLE FEEDBACK(
	REPORTER_ID INTEGER REFERENCES USER_A (USER_ID),
	APPROVER_ID INTEGER REFERENCES USER_A (USER_ID),
	TRIP_ID INTEGER REFERENCES TRIP (TRIP_ID),
	STATUS INTEGER NOT NULL,
	FEEDBACK_RATE INTEGER,
	FEEDBACK_TEXT TEXT NOT NULL,
	CREATION_DATE TIMESTAMP NOT NULL
);


CREATE TABLE REPORT_REPLY(
	REPORT_ID INTEGER REFERENCES REPORT (REPORT_ID),
	WRITER_ID INTEGER REFERENCES USER_A (USER_ID),
	REPLY_TEXT TEXT NOT NULL,
	CREATION_DATE TIMESTAMP NOT NULL
);

CREATE TABLE SERVICE(
	SERVICE_ID SERIAL PRIMARY KEY,
	CARRIER_ID INTEGER REFERENCES USER_A (USER_ID),
	APPROVER_ID INTEGER REFERENCES USER_A (USER_ID),
	SERVICE_NAME VARCHAR(40) NOT NULL,
	SERVICE_DESCRIPTION VARCHAR(255),
	SERVICE_STATUS INTEGER,
	CREATION_DATE TIMESTAMP NOT NULL
);

CREATE TABLE SERVICE_REPLY(
	SERVICE_ID INTEGER REFERENCES SERVICE (SERVICE_ID),
	WRITER_ID INTEGER REFERENCES USER_A (USER_ID),
	REPLY_TEXT TEXT NOT NULL,
	CREATION_DATE TIMESTAMP NOT NULL
);

CREATE TABLE POSSIBLE_SERVICE(
	P_SERVICE_ID SERIAL PRIMARY KEY,
	SERVICE_ID INTEGER REFERENCES SERVICE (SERVICE_ID),
	CLASS_ID INTEGER REFERENCES TICKET_CLASS (CLASS_ID),
	SERVICE_PRICE INTEGER NOT NULL,
	P_SERVICE_STATUS INTEGER NOT NULL
);

CREATE TABLE BUNDLE(
	BUNDLE_ID SERIAL PRIMARY KEY,
	START_DATE TIMESTAMP NOT NULL,
	FINISH_DATE TIMESTAMP NOT NULL,
	BUNDLE_PRICE INTEGER NOT NULL,
	BUNDLE_DESCRIPTION VARCHAR(255),
	BUNDLE_PHOTO VARCHAR(128)NOT NULL
);

CREATE TABLE BUNDLE_CLASS(
	BUNDLE_ID INTEGER REFERENCES BUNDLE (BUNDLE_ID),
	CLASS_ID INTEGER REFERENCES TICKET_CLASS (CLASS_ID),
	ITEM_NUMBER INTEGER NOT NULL
);

CREATE TABLE BUNDLE_SERVICE(
	BUNDLE_ID INTEGER REFERENCES BUNDLE (BUNDLE_ID),
	P_SERVICE_ID INTEGER REFERENCES POSSIBLE_SERVICE (P_SERVICE_ID),
	ITEM_NUMBER INTEGER NOT NULL
);

CREATE TABLE BOUGHT_BUNDLE(
														B_BUNDLE_ID SERIAL PRIMARY KEY,
														BUNDLE_ID INTEGER REFERENCES BUNDLE(BUNDLE_ID),
														PURCHASE_DATE TIMESTAMP
);

CREATE TABLE TICKET(
										 TICKET_ID SERIAL PRIMARY KEY,
										 PASSENGER_ID INTEGER REFERENCES USER_A (USER_ID),
										 CLASS_ID INTEGER REFERENCES TICKET_CLASS (CLASS_ID),
										 B_BUNDLE INTEGER REFERENCES BOUGHT_BUNDLE (B_BUNDLE_ID),
										 SEAT INTEGER NOT NULL,
										 END_PRICE REAL,
										 PURCHASE_DATE TIMESTAMP
);

CREATE TABLE BOUGHT_SERVICE(
														 P_SERVICE_ID INTEGER REFERENCES POSSIBLE_SERVICE (P_SERVICE_ID),
														 TICKET_ID INTEGER REFERENCES TICKET (TICKET_ID)
);

CREATE TABLE SUGGESTION(
	SUGGESTION_ID SERIAL PRIMARY KEY,
	DISCOUNT_ID INTEGER REFERENCES DISCOUNT (DISCOUNT_ID),
	CLASS_ID INTEGER REFERENCES TICKET_CLASS (CLASS_ID)
);

CREATE TABLE SUGGESTED_SERVICE(
	SUGGESTION_ID INTEGER REFERENCES SUGGESTION (SUGGESTION_ID),
	P_SERVICE_ID INTEGER REFERENCES POSSIBLE_SERVICE (P_SERVICE_ID)
);

CREATE TABLE NOTIFICATION_OBJECT(
	OBJECT_ID SERIAL PRIMARY KEY,
	ACTOR_ID INTEGER REFERENCES USER_A (USER_ID),
	ENTITY_TYPE_ID INTEGER NOT NULL,
	ENTITY_ID INTEGER NOT NULL,
	CREATED_ON TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	STATUS INTEGER NOT NULL
);

CREATE TABLE NOTIFICATION(
	NOTIFICATION_ID SERIAL PRIMARY KEY,
	OBJECT_ID INTEGER REFERENCES NOTIFICATION_OBJECT (OBJECT_ID),
	NOTIFIER_ID INTEGER REFERENCES USER_A (USER_ID),
	STATUS INTEGER NOT NULL
);

CREATE TABLE TRIP_VIEW(
	TRIP_ID INTEGER REFERENCES TRIP (TRIP_ID),
	USER_ID INTEGER REFERENCES USER_A (USER_ID),
	VIEW_DATE TIMESTAMP NOT NULL
);

CREATE TABLE SERVICE_VIEW(
	P_SERVICE_ID INTEGER REFERENCES POSSIBLE_SERVICE (P_SERVICE_ID),
	USER_ID INTEGER REFERENCES USER_A (USER_ID),
	VIEW_DATE TIMESTAMP NOT NULL
);
